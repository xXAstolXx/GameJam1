// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSSet
#pragma kernel CSSpawn
#pragma kernel CSUpdate
#pragma kernel CSInitialize

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> renderTexture;

Buffer<float4> lengthBuffer;
Buffer<float4> thicknessSpawnBuffer;
Buffer<float4> thicknessDespawnBuffer;

RWBuffer<float4> test;

RWBuffer<int4> valueBuffer;
RWBuffer<int4> tempValueBuffer;

int resoX;
int resoY;

float4 innerColor;
float4 middleColor;
float4 outerColor;

int spawnLimit;

float time;

float rand3dTo1d(float3 value, float3 dotDir = float3(12.9898, 78.233, 37.719))
{
	//make value smaller to avoid artefacts
    float3 smallValue = sin(value);
	//get scalar value from 3d vector
    float random = dot(smallValue, dotDir);
	//make value more random by making it bigger and then taking the factional part
    random = frac(sin(random) * 143758.5453);
    return random;
}


[numthreads(8,8,1)]
void CSSet (int3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = y * resoX + x;
    if (y >= resoY)
    {
        return;
    }
    if (y == 0)
    {
        tempValueBuffer[index] = int4(0,0,0,0);
        return;
    }
    
    int a = 0;
    int b = 0;
    int c = 0;
    
    if (valueBuffer[index].x == 1)
    {
        float randValue = rand3dTo1d(float3(x/resoX,y/resoY,time));
        float deathValue = lengthBuffer[y].x * thicknessDespawnBuffer[x].x;
        if (randValue < deathValue)
        {
            a = 1;
        }
    }
        
    if (valueBuffer[index].y == 1)
    {
        float randValue = rand3dTo1d(float3(x / resoX, y / resoY, time+0.177));
        float deathValue = lengthBuffer[y].y * thicknessDespawnBuffer[x].y;
        if (randValue < deathValue)
        {
            b = 1;
        }
    }
        
    if (valueBuffer[index].z == 1)
    {
        float randValue = rand3dTo1d(float3(x / resoX, y / resoY, time+0.222));
        float deathValue = lengthBuffer[y].z * thicknessDespawnBuffer[x].z;
        if (randValue < deathValue)
        {
            c = 1;
        }
    }
    if (id.x == 7 && id.y == 7)
    {
        //test[0] = int4(a, b, c, 0);
        test[0] = float4(spawnLimit, lengthBuffer[y].z, thicknessDespawnBuffer[x].z, 0);
    }
    tempValueBuffer[index + resoX] = int4(a,b,c, 0);
}

[numthreads(8, 8, 1)]
void CSSpawn(int3 id : SV_DispatchThreadID)
{
    if (id.y == 0)
    {
        int x = id.x;
        int y = id.y;
        int index = y * resoX + x;
    
        int a = 1;
        int b = 1;
        int c = 1;
        
        if (tempValueBuffer[index].x == 0)
        {
            float randValue = rand3dTo1d(float3(x / resoX, y / resoY, time+0.134));
            float spawnValue = thicknessSpawnBuffer[x].x;
            if (randValue > spawnValue)
            {
                a = 0;
            }
        }
        if (tempValueBuffer[index].y == 0)
        {
            float randValue = rand3dTo1d(float3(x / resoX, y / resoY, time+0.987));
            float spawnValue = thicknessSpawnBuffer[x].y;
            if (randValue > spawnValue)
            {
                b = 0;
            }
        }
        if (tempValueBuffer[index].z == 0)
        {
            float randValue = rand3dTo1d(float3(x / resoX, y / resoY, time+0.333));
            float spawnValue = thicknessSpawnBuffer[x].z;
            if (randValue > spawnValue)
            {
                c = 0;
            }
        }

        tempValueBuffer[index + resoX] = int4(a, b, c, 0);
    }
}

[numthreads(8, 8, 1)]
void CSUpdate(int3 id : SV_DispatchThreadID)
{
    int index = id.y * resoX + id.x;
    valueBuffer[index] = tempValueBuffer[index];
    
    if (valueBuffer[index].x == 1)
    {
        renderTexture[id.xy] = innerColor;
    }
    else if (valueBuffer[index].y == 1)
    {
        renderTexture[id.xy] = middleColor;
    }
    else if (valueBuffer[index].z == 1)
    {
        renderTexture[id.xy] = outerColor;
    }
    else
    {
        renderTexture[id.xy] = float4(0, 0, 0, 0);
    }
}

[numthreads(8, 8, 1)]
void CSInitialize(int3 id : SV_DispatchThreadID)
{
    renderTexture[id.xy] = float4(0,0,0,0);

}
